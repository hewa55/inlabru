% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/effect.R
\name{component.formula}
\alias{component.formula}
\title{inlabru latent model component construction using formulae}
\usage{
\method{component}{formula}(object, ...)
}
\arguments{
\item{object}{A formula describing latent model components.}

\item{...}{Ignored arguments (S3 compatibility)}
}
\description{
Similar to glm(), gam() and inla() \link{bru} uses formula objects to describe response data and latent 
(unknonw) components of the model to be fitted. However, in addition to the syntax compatible with 
\link[INLA]{inla}, bru components offer addtitional functionality which facilitates modeling.
}
\details{
\link{bru} will understand formulae describing fixed effect models just like the other methods. For instance, the
formula \code{y ~ x} will fit the linear combination of an effect named \code{x} and an intercept to
the response \code{y} with respect to the likelihood family stated when calling \link{bru}. Mathematically,
the linear predictor \eqn{\eta} would be written down as 

\deqn{\eta = \beta * x + c,} 

where:

\itemize{
\item{\eqn{c} }{is the \emph{intercept}}
\item{\eqn{x }}{is a \emph{covariate}}
\item{\eqn{\beta} }{is a \emph{random variable} associated with \eqn{x} and} 
\item{\eqn{\psi = \beta * x }}{ is called the \emph{random effect} of \eqn{x}}
}

A problem that arises when using this kind of R formula is that it does not clearly relect the mathematical
formula. For instance, when providing the formula to inla, the resulting object will refer to the random
effect \eqn{\psi = \beta * x } as \code{x}. Hence, it is not clear if \code{x} refers to the covariate 
or the effect of the covariate.
}
\section{Naming random effects}{


In INLA, a simple random effect model would be expressed as 

\itemize{\item{\code{formula = y ~ f(x, model = "linear")},}}

where \link[INLA]{f} is the inla specific function to set up random effects of all kinds. The underlying 
predictor would again be \eqn{\eta = \beta * x + c} but the result of fitting the model would state 
\code{x} as the random effect's name. bru allows to rewrite this formula in order to explicitly state 
the name of the random effect and the name of the associated. This is achived by replacing \code{f}
with an arbitrary name that we wish to assign to the effect, e.g.

\itemize{\item{\code{components = y ~ psi(x, model = "linear")}.}}

Being able to discriminate between \eqn{x} and \eqn{\psi} is relevant because of two functionalities
bru offers. The formula parameters of both, \link{bru} and the prediction method \link{predict.bru}
are interpreted in the mathematical sense. For instance, \code{predict} may be used to analyze the
an analytical combination of the covariate \eqn{x} and the intercept using

\itemize{\item{\code{predict(fit, data.frame(x=1)), ~ exp(x + Intercept)}.}}

On the other hand, predict may be used to only look at a transformation of the random effect \eqn{\psi}

\itemize{\item{\code{predict(fit, NULL, ~ exp(psi))}.}}
}

\examples{
# As an example, let us create a linear component. Here, the component is 
# called "myLinearEffectOfX" while the covariate the component acts on is 
# called "x". Note that a list of components is returned because the 
# formula may define multiple components

eff = component(~ myLinearEffectOfX(map = x, model = "linear"))
summary(eff[[1]])

}
\seealso{
Other Component constructor: \code{\link{component.character}},
  \code{\link{component}}
}
\author{
Fabian E. Bachl <\email{bachlfab@gmail.com}>
}
\concept{Component constructor}
